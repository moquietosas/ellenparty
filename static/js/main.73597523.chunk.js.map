{"version":3,"sources":["Table/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","styles","container","maxHeight","rows","createData","txhash","block","age","from","position","to","value","txfee","ageAdded","getRandomString","length","randomChars","result","i","charAt","Math","floor","random","arr","setArr","a","time","arrCopy","minValue","maxValue","Date","calcValue","txFee","calcFee","interval","setInterval","aux","SimpleTable","classes","useState","setRows","endRef","useRef","useEffect","addDataIntervals","clearInterval","console","log","current","scrollIntoView","behavior","className","root","TableContainer","style","overflow","component","Paper","Table","stickyHeader","table","aria-label","TableHead","head","TableRow","TableCell","align","headTxfee","TableBody","body","map","row","index","Slide","direction","in","mountOnEnter","unmountOnExit","key","scope","toFixed","float","clear","ref","App","theme","createMuiTheme","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.73597523.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport styles from \"./styles.json\";\r\n\r\nconst useStyles = makeStyles({\r\n    ...styles,\r\n    container: {\r\n        maxHeight: 53 * (styles.container.rows + 1) + 20,\r\n    },\r\n});\r\n\r\nfunction createData(\r\n    txhash,\r\n    block,\r\n    age,\r\n    from,\r\n    position,\r\n    to,\r\n    value,\r\n    txfee,\r\n    ageAdded\r\n) {\r\n    return {txhash, block, age, from, position, to, value, txfee, ageAdded};\r\n}\r\n\r\nfunction getRandomString(length = 25) {\r\n    var randomChars =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var result = \"\";\r\n    for (var i = 0; i < length; i++) {\r\n        result += randomChars.charAt(\r\n            Math.floor(Math.random() * randomChars.length)\r\n        );\r\n    }\r\n    return \"0X\" + result;\r\n}\r\n\r\nasync function addDataIntervals(arr, setArr, max = 3, time = 2000) {\r\n    let arrCopy = [...arr];\r\n    let position = false;\r\n    let from = getRandomString();\r\n    let to = getRandomString();\r\n    const minValue = 3;\r\n    const maxValue = 150;\r\n    let age = \"a few seconds\";\r\n    let ageAdded = new Date();\r\n    const calcValue = () => {\r\n        return Math.random() * (maxValue - minValue) + minValue;\r\n    };\r\n    let value = calcValue();\r\n\r\n    const calcFee = () => {\r\n        return value * 0.000672;\r\n    };\r\n    let txFee = calcFee();\r\n\r\n    const interval = setInterval(function () {\r\n        position = !position;\r\n        arrCopy = [\r\n            ...arrCopy,\r\n            createData(\r\n                getRandomString(),\r\n                8456553,\r\n                age,\r\n                from,\r\n                position ? \"IN\" : \"OUT\",\r\n                to,\r\n                value,\r\n                txFee,\r\n                ageAdded\r\n            ),\r\n        ];\r\n        setArr(arrCopy);\r\n        if (position) {\r\n            let aux = to;\r\n            to = from;\r\n            from = aux;\r\n            value = value * 2;\r\n            txFee = calcFee();\r\n        } else {\r\n            to = getRandomString();\r\n            from = getRandomString();\r\n            value = calcValue();\r\n            txFee = calcFee();\r\n        }\r\n    }, time);\r\n    return interval;\r\n}\r\n\r\nexport default function SimpleTable() {\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([]);\r\n    const endRef = useRef();\r\n\r\n    useEffect(() => {\r\n        const interval = addDataIntervals(rows, setRows, 6);\r\n        return () => {\r\n            clearInterval(interval);\r\n            console.log(\"clean\");\r\n        };\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    const scrollToBottom = () => {\r\n        endRef.current.scrollIntoView({behavior: \"smooth\"});\r\n    };\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [rows]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TableContainer\r\n                style={{overflow: \"hidden\"}}\r\n                component={Paper}\r\n                className={classes.container}\r\n            >\r\n                <Table\r\n                    stickyHeader\r\n                    className={classes.table}\r\n                    aria-label=\"simple table\"\r\n                >\r\n                    <TableHead className={classes.head}>\r\n                        <TableRow>\r\n                            <TableCell>TXHASH</TableCell>\r\n                            <TableCell align=\"right\">BLOCK</TableCell>\r\n                            <TableCell align=\"right\">AGE</TableCell>\r\n                            <TableCell align=\"right\">FROM</TableCell>\r\n                            <TableCell align=\"right\">&nbsp;</TableCell>\r\n                            <TableCell align=\"right\">TO</TableCell>\r\n                            <TableCell align=\"right\">VALUE</TableCell>\r\n                            <TableCell\r\n                                align=\"right\"\r\n                                className={classes.headTxfee}\r\n                            >\r\n                                [TXFEE]\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody className={classes.body}>\r\n                        {rows.map((row, index) => (\r\n                            <Slide\r\n                                direction=\"down\"\r\n                                in={true}\r\n                                mountOnEnter\r\n                                unmountOnExit\r\n                                key={\"tx-\" + index}\r\n                            >\r\n                                <TableRow className={classes.row}>\r\n                                    <TableCell\r\n                                        className={classes.txhash}\r\n                                        component=\"th\"\r\n                                        scope=\"row\"\r\n                                    >\r\n                                        {row.txhash}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        className={classes.block}\r\n                                        align=\"right\"\r\n                                    >\r\n                                        {row.block}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        className={classes.age}\r\n                                        align=\"right\"\r\n                                    >\r\n                                        {row.age}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        className={classes.from}\r\n                                        align=\"right\"\r\n                                    >\r\n                                        {row.from}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        align=\"right\"\r\n                                        className={classes[row.position]}\r\n                                    >\r\n                                        {row.position}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        {row.to}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        className={classes.value}\r\n                                        align=\"right\"\r\n                                    >\r\n                                        {row.value.toFixed(3)}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        className={classes.txfee}\r\n                                        align=\"right\"\r\n                                    >\r\n                                        {row.txfee.toFixed(5)}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </Slide>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <div style={{float: \"left\", clear: \"both\"}} ref={endRef}></div>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MaterialTableDemo from \"./Table/index\";\n// import VirtualizedTable from \"./VirtualizedTable/index\";\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core/styles\";\nimport styles from \"./styles.json\";\n\nfunction App() {\n    const theme = createMuiTheme(styles);\n    return (\n        <ThemeProvider theme={theme}>\n            <MaterialTableDemo />\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"crypto_att\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}