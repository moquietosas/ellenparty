{"version":3,"sources":["tableUtils/interval.js","tableUtils/loadJSON.js","tableUtils/useLoadTable.js","Table/index.js","VirtualizedTable/index.js","App.js","serviceWorker.js","index.js"],"names":["getRandomString","length","randomChars","result","i","charAt","Math","floor","random","createData","txhash","block","from","deposited","received","txfee","arr","setArr","behavior","a","arrCopy","position","intervalTime","minRows","calcInterval","maxValue","minValue","calcValue","currency","toFixed","txFee","calcFee","code","interval","setInterval","loadJSON","url","fetch","res","json","useLoadTable","rows","setRows","setStyle","setColumns","listRef","useState","isLoading","setLoading","useEffect","then","data","addDataIntervals","depositedWidth","fromWidth","receivedWidth","totalWidth","blockWidth","txfeeWidth","txhashWidth","responsiveWidth","console","log","auxArr","actualWidth","window","outerWidth","width","label","dataKey","numeric","maxHeight","row","height","offset","container","clearInterval","makeStyles","root","props","head","table","body","useStyles","theme","createStyles","flexContainer","display","boxSizing","tableRow","tableRowHover","backgroundColor","palette","grey","tableCell","noClick","cursor","opacity","flip","paddingRight","direction","undefined","outline","txHash","MuiVirtualizedTable","getRowClassName","index","classes","onRowClick","clsx","cellRenderer","cellData","columnIndex","columns","rowHeight","extraClass","Fade","in","style","transitionDelay","TableCell","component","className","variant","align","headerRenderer","headerHeight","this","prevProps","prevState","rowCount","endRef","current","scrollToRow","tableProps","gridStyle","overflowY","rowClassName","ref","map","other","key","headerProps","React","PureComponent","defaultProps","createRef","VirtualizedTable","ReactVirtualizedTable","Paper","minWidth","rowGetter","App","setTheme","createMuiTheme","CssBaseline","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wXAAA,SAASA,IAIL,IAJmC,IAAdC,EAAa,uDAAJ,GAC1BC,EACA,iEACAC,EAAS,GACJC,EAAI,EAAGA,EAAIH,EAAQG,IACxBD,GAAUD,EAAYG,OAClBC,KAAKC,MAAMD,KAAKE,SAAWN,EAAYD,SAG/C,MAAO,KAAOE,EAGlB,SAASM,EAAWC,EAAQC,EAAOC,EAAMC,EAAWC,EAAUC,GAC1D,MAAO,CAACL,SAAQC,QAAOC,OAAMC,YAAWC,WAAUC,S,4CAG/C,WAAgCC,EAAKC,EAAQC,GAA7C,qCAAAC,EAAA,sDA6CH,IA5CIC,EADD,YACeJ,GACdK,GAAW,EACXT,EAAOZ,IACU,EACdsB,EAAyBJ,EAAzBI,aAAyBJ,EAAXK,QACfC,EAAe,WACjB,OACIlB,KAAKE,UACwB,IAAxBc,EAAaG,SAA0C,IAAxBH,EAAaI,UACzB,IAAxBJ,EAAaI,UAkBjBZ,GAbEa,EAAY,WAAO,IAAD,EACST,EAASU,SAA/BF,EADa,EACbA,SAAUD,EADG,EACHA,SASjB,OAAOnB,KAAKE,UAAYiB,EAAWC,GAAYA,MAGxBG,QAxBN,GAyBjBhB,GAAwB,EAAXC,GAAce,QAzBV,GAuCjBC,GAZEC,EAAU,WAEZ,OAAQb,EAASU,SAASI,MACtB,IAAK,MACD,OAAmB,OAAZnB,EACX,IAAK,MACD,OAAmB,MAAZA,EACX,QACI,OAAmB,OAAZA,OAIGgB,QAAQ,GAErBzB,EAAI,EAAGA,EAAIc,EAASK,QAASnB,IAClCgB,EAAO,sBACAA,GADA,CAEHX,EACIT,IACA,QACAY,EACAC,EACAC,EACAgB,KAGRb,EAAOG,GACPR,EAAOZ,IACPc,EAAWa,IAAYE,QAvDN,GAwDjBhB,GAAwB,EAAXC,GAAce,QAxDV,GAyDjBC,EAAQC,IAAUF,QAAQ,GA7D3B,OAgEGI,EAAWC,aAAY,WACzBb,GAAYA,EACZD,EAAO,sBACAA,GADA,CAGHX,EACIT,IACA,QACAY,EACAC,EACAC,EACAgB,KAGRb,EAAOG,GACPR,EAAOZ,IACPc,EAAWa,IAAYE,QA5EN,GA6EjBhB,GAAwB,EAAXC,GAAce,QA7EV,GA8EjBC,EAAQC,IAAUF,QAAQ,KAC3BL,KAnFA,kBAoFIS,GApFJ,6C,sBChBA,SAAeE,EAAtB,kC,4CAAO,WAAwBC,GAAxB,eAAAjB,EAAA,sEACekB,MAAMD,GADrB,cACGE,EADH,gBAEUA,EAAIC,OAFd,oF,sBCIQ,SAASC,EAAT,GAMX,IALAC,EAKD,EALCA,KACAC,EAID,EAJCA,QACAC,EAGD,EAHCA,SACAC,EAED,EAFCA,WAED,KADCC,QAEgCC,oBAAS,IAD1C,mBACQC,EADR,KACmBC,EADnB,KA4FC,OA1FAC,qBAAU,WACN,IAAIhB,EAAW,KAkFf,OAhFAE,EAAS,cAAce,MAAK,SAACC,GACzBlB,EFAL,SAAP,sCEAuBmB,CAAiBX,EAAMC,EAAP,eAAoBS,EAAKjC,WADlB,IAG9BmC,EAMAF,EANAE,eACAC,EAKAH,EALAG,UACAC,EAIAJ,EAJAI,cAKEC,EACFH,EACAC,EACAC,EAJAJ,EAHAM,WAGAN,EAFAO,WAEAP,EADAQ,YASEC,EAAkBP,EAAiBC,EAAYC,EACrDM,QAAQC,MACR,IAAIC,EAAS,GACTC,EAAcJ,EACdK,OAAOC,WAAaV,IACpBQ,EAAcR,EACdO,EAAS,CACL,CACII,MAAOhB,EAAKQ,YAAcR,EAAKQ,YAAc,EAC7CS,MAAO,SACPC,QAAS,SACTC,SAAS,GAEb,CACIH,MAAOhB,EAAKM,WAAaN,EAAKM,WAAa,EAC3CW,MAAO,QACPC,QAAS,QACTC,SAAS,GAEb,CACIH,MAAOhB,EAAKO,WAAaP,EAAKO,WAAa,EAC3CU,MAAO,UACPC,QAAS,QACTC,SAAS,KAKrB1B,EAAW,CACP,CACIuB,MAAOhB,EAAKG,UAAYH,EAAKG,UAAY,EACzCc,MAAO,OACPC,QAAS,OACTC,SAAS,GAEb,CACIH,MAAOhB,EAAKI,cAAgBJ,EAAKI,cAAgB,EACjDa,MAAO,WACPC,QAAS,WACTC,SAAS,GAEb,CACIH,MAAOhB,EAAKE,eAAiBF,EAAKE,eAAiB,EACnDe,MAAO,YACPC,QAAS,YACTC,SAAS,IAjBP,mBAmBHP,KAEPpB,EAAS,2BACFQ,GADC,IAEJK,aACAI,kBACAI,cACAO,UACIpB,EAAKqB,IAAIC,QAAUtB,EAAKjC,SAASuB,KAAO,IACvCU,EAAKjC,SAASwD,OAASvB,EAAKjC,SAASwD,OAAS,GACnDC,UAAU,eACHxB,EAAKwB,iBAIpB3B,GAAW,GACJ,WACH4B,cAAc3C,GACd4B,QAAQC,IAAI,YAIjB,IACIf,EC1FO8B,YAAW,CACzBC,KAAM,SAACC,GAAD,sBACCA,EAAMD,OAEbE,KAAM,SAACD,GAAD,sBACCA,EAAMC,OAEbC,MAAO,SAACF,GAAD,sBACAA,EAAME,QAEbC,KAAM,SAACH,GAAD,sBACCA,EAAMG,OAEbnE,MAAO,SAACgE,GAAD,sBACAA,EAAMhE,QAEbyD,IAAK,SAACO,GAAD,sBACEA,EAAMP,MAEbG,UAAW,SAACI,GAAD,sBACJA,EAAMJ,c,yFCtBXQ,EAAYN,aAAW,SAACO,GAAD,OACzBC,YAAa,CACTC,cAAe,CACXC,QAAS,OAETC,UAAW,cAEfC,SAAU,GACVC,cAAe,CACX,UAAW,CACPC,gBAAiBP,EAAMQ,QAAQC,KAAK,OAG5CC,UAAW,GACXC,QAAS,CACLC,OAAQ,WAEZlB,KAAM,SAACC,GAAD,sBACCA,EAAMD,OAEbE,KAAM,SAACD,GAAD,oBACFkB,QAAS,IACNlB,EAAMC,OAEbC,MAAO,SAACF,GAAD,oBACH,wCAAyC,CACrCmB,MAAM,EACNC,aACwB,QAApBf,EAAMgB,UAAsB,oBAAiBC,GAErD,4BAA6B,CACzBC,QAAS,SAKVvB,EAAME,QAEbC,KAAM,SAACH,GAAD,MAAY,CACdD,KAAK,eACEC,EAAMG,QAGjBnE,MAAO,SAACgE,GAAD,sBACAA,EAAMhE,QAEbwF,OAAQ,SAACxB,GAAD,sBACDA,EAAMwB,SAEb/B,IAAK,SAACO,GAAD,sBACEA,EAAMP,MAEbG,UAAW,SAACI,GAAD,sBACJA,EAAMJ,iBAyCf6B,E,4MA0BFC,gBAAkB,YAAc,IAAZC,EAAW,EAAXA,MAAW,EACG,EAAK3B,MAA5B4B,EADoB,EACpBA,QAASC,EADW,EACXA,WAEhB,OAAOC,YAAKF,EAAQlB,SAAUkB,EAAQrB,cAA3B,eACNqB,EAAQjB,eAA2B,IAAXgB,GAA8B,MAAdE,K,EAIjDE,aAAe,YAA8B,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,YAAiB,EACU,EAAKjC,MAAhDkC,EADiC,EACjCA,QAASN,EADwB,EACxBA,QAASO,EADe,EACfA,UAAWN,EADI,EACJA,WAC9BO,EAC+B,UAAjCF,EAAQD,GAAa3C,QAAsBsC,EAAQ5F,MAAQ,KAC/D,OACI,kBAACqG,EAAA,EAAD,CAAMC,IAAI,EAAMC,MAAO,CAACC,gBAAiB,SACrC,kBAACC,EAAA,EAAD,CACIC,UAAU,MACVC,UAAWb,YACPF,EAAQnC,IACRmC,EAAQrB,cAFG,eAINqB,EAAQZ,QAAwB,MAAda,GAEvBO,GAEJQ,QAAQ,OACRL,MAAO,CAAC7C,OAAQyC,GAChBU,MACoB,MAAfZ,GAAuBC,EAAQD,GAAa1C,QAEvC,QACA,QAGTyC,K,EAMjBc,eAAiB,YAA2B,IAAzBzD,EAAwB,EAAxBA,MAAO4C,EAAiB,EAAjBA,YAAiB,EACE,EAAKjC,MAAvC+C,EADgC,EAChCA,aAAcb,EADkB,EAClBA,QAASN,EADS,EACTA,QACxBQ,EAC+B,UAAjCF,EAAQD,GAAa3C,QAAsBsC,EAAQ5F,MAAQ,KAI/D,OACI,kBAACyG,EAAA,EAAD,CACIC,UAAU,MACVC,UAAWb,YACPF,EAAQb,UACRa,EAAQrB,cACRqB,EAAQZ,QACRY,EAAQ3B,KACRmC,GAEJQ,QAAQ,OACRL,MAAO,CACH7C,OAAQqD,EACR3D,MAAO8C,EAAQD,GAAa7C,OAEhCyD,MAAOX,EAAQD,GAAa1C,QAAmB,QAAU,QAEzD,8BAAOF,K,kEA7EX2D,KAAKhD,MAAMuC,OACXzD,QAAQC,IAAIiE,KAAKhD,S,yCAONiD,EAAWC,GACtBF,KAAKhD,MAAMmD,SAAWF,EAAUE,UAChCH,KAAKhD,MAAMoD,OAAOC,QAAQC,YAAYN,KAAKhD,MAAMmD,Y,+BAwE/C,IAAD,SAODH,KAAKhD,MALL4B,EAFC,EAEDA,QACAM,EAHC,EAGDA,QACAC,EAJC,EAIDA,UACAY,EALC,EAKDA,aACGQ,EANF,gEAQL,OACI,kBAAC,IAAD,MACK,gBAAE7D,EAAF,EAAEA,OAAQN,EAAV,EAAUA,MAAV,OACG,kBAAC,IAAD,eACIM,OAAQA,EACRN,MAAOA,EACP+C,UAAWA,EACXqB,UAAW,CACPnC,UAAW,UACXoC,UAAW,UAEfV,aAAcA,EACdJ,UAAWf,EAAQ1B,OACfqD,EAVR,CAWIG,aAAc,EAAKhC,gBACnBiC,IAAK,EAAK3D,MAAMoD,SAEflB,EAAQ0B,KAAI,WAAsBjC,GAAW,IAA/BrC,EAA8B,EAA9BA,QAAYuE,EAAkB,2BACzC,OACI,kBAAC,IAAD,eACIC,IAAKxE,EACLwD,eAAgB,SAACiB,GAAD,OACZ,EAAKjB,eAAL,2BACOiB,GADP,IAEI9B,YAAaN,MAGrBgB,UAAWf,EAAQrB,cACnBwB,aAAc,EAAKA,aACnBzC,QAASA,GACLuE,e,GApING,IAAMC,eAAlCxC,EACKyC,aAAe,CAClBnB,aAAc,GACdZ,UAAW,GACXiB,OAAQY,IAAMG,aA2JtB,IAAMC,EAAmB3C,EAEV,SAAS4C,IAAyB,IAAD,EACpBtG,mBAAS,IADW,mBACrCL,EADqC,KAC/BC,EAD+B,OAEdI,mBAAS,IAFK,mBAErCmE,EAFqC,KAE5BrE,EAF4B,OAGlBE,mBAAS,IAHS,mBAGrCwE,EAHqC,KAG9B3E,EAH8B,KAKtCgE,EAAUxB,EAAUmC,GACpBvE,EAAYP,EAAa,CAC3BC,OACAC,UACAC,WACArB,aAAcgG,EAAMpG,SACpB0B,eAOJ,OALAK,qBAAU,cAEP,CAACqE,EAAOvE,IAGHA,EAiBJ,KAhBA,kBAACsG,EAAA,EAAD,CACI/B,MAAO,CACH7C,OAAQ6C,EAAM/C,UACdJ,MAAOmD,EAAMtD,YACbsF,SAAUhC,EAAMtD,aAEpB0D,UAAWf,EAAQhC,WAEnB,kBAACwE,EAAD,CACIjB,SAAUzF,EAAKxC,OACfsJ,UAAW,gBAAE7C,EAAF,EAAEA,MAAF,OAAajE,EAAKiE,IAC7BC,QAASA,EACTW,MAAOA,EACPL,QAASA,K,+BC3QVuC,MAtBf,WAAe,MAEe1G,mBAAS,IAFxB,mBAEJsC,EAFI,KAEGqE,EAFH,OAGqB3G,oBAAS,GAH9B,mBAGJC,EAHI,KAGOC,EAHP,KAaX,OARAC,qBAAU,WAKN,OAJAd,EAAS,cAAce,MAAK,SAACC,GACzBsG,EAASC,YAAevG,IACxBH,GAAW,MAER,eAER,IACKD,EAMJ,KALA,kBAAC,IAAD,CAAkBqC,MAAOA,GACrB,kBAACuE,EAAA,EAAD,MAEA,kBAAC,EAAD,QCbQC,QACW,cAA7B3F,OAAO4F,SAASC,UAEe,UAA7B7F,OAAO4F,SAASC,UAEhB7F,OAAO4F,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,eDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrH,MAAK,SAAAsH,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9G,QAAQ8G,MAAMA,EAAMC,c","file":"static/js/main.9fef4669.chunk.js","sourcesContent":["function getRandomString(length = 25) {\r\n    var randomChars =\r\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    var result = \"\";\r\n    for (var i = 0; i < length; i++) {\r\n        result += randomChars.charAt(\r\n            Math.floor(Math.random() * randomChars.length)\r\n        );\r\n    }\r\n    return \"0X\" + result;\r\n}\r\n\r\nfunction createData(txhash, block, from, deposited, received, txfee) {\r\n    return {txhash, block, from, deposited, received, txfee};\r\n}\r\n\r\nexport async function addDataIntervals(arr, setArr, behavior) {\r\n    let arrCopy = [...arr];\r\n    let position = false;\r\n    let from = getRandomString();\r\n    let decimalNumbers = 3;\r\n    const {intervalTime, minRows} = behavior;\r\n    const calcInterval = () => {\r\n        return (\r\n            Math.random() *\r\n                (intervalTime.maxValue * 1000 - intervalTime.minValue * 1000) +\r\n            intervalTime.minValue * 1000\r\n        );\r\n    };\r\n\r\n    // const maxValue = 150;\r\n    const calcValue = () => {\r\n        const {minValue, maxValue} = behavior.currency;\r\n        // switch (behavior.currency) {\r\n        //     case \"eth\":\r\n        //         return Math.random() * (maxValue - minValue) + minValue;\r\n        //     case \"btc\":\r\n        //         return Math.random() * (maxValue - minValue) + minValue;\r\n        //     default:\r\n        //         return Math.random() * (maxValue - minValue) + minValue;\r\n        // }\r\n        return Math.random() * (maxValue - minValue) + minValue;\r\n    };\r\n\r\n    let received = calcValue().toFixed(decimalNumbers);\r\n    let deposited = (received * 2).toFixed(decimalNumbers);\r\n\r\n    const calcFee = () => {\r\n        // const {code} = behavior.currency;\r\n        switch (behavior.currency.code) {\r\n            case \"eth\":\r\n                return deposited * 0.000672;\r\n            case \"btc\":\r\n                return deposited * 0.00012;\r\n            default:\r\n                return deposited * 0.000672;\r\n        }\r\n        // return deposited * 0.000672;\r\n    };\r\n    let txFee = calcFee().toFixed(8);\r\n\r\n    for (let i = 0; i < behavior.minRows; i++) {\r\n        arrCopy = [\r\n            ...arrCopy,\r\n            createData(\r\n                getRandomString(),\r\n                8456553,\r\n                from,\r\n                deposited,\r\n                received,\r\n                txFee\r\n            ),\r\n        ];\r\n        setArr(arrCopy);\r\n        from = getRandomString();\r\n        received = calcValue().toFixed(decimalNumbers);\r\n        deposited = (received * 2).toFixed(decimalNumbers);\r\n        txFee = calcFee().toFixed(8);\r\n    }\r\n\r\n    const interval = setInterval(function () {\r\n        position = !position;\r\n        arrCopy = [\r\n            ...arrCopy,\r\n            //txhash, block, from, deposited, received, txfee\r\n            createData(\r\n                getRandomString(),\r\n                8456553,\r\n                from,\r\n                deposited,\r\n                received,\r\n                txFee\r\n            ),\r\n        ];\r\n        setArr(arrCopy);\r\n        from = getRandomString();\r\n        received = calcValue().toFixed(decimalNumbers);\r\n        deposited = (received * 2).toFixed(decimalNumbers);\r\n        txFee = calcFee().toFixed(8);\r\n    }, calcInterval());\r\n    return interval;\r\n}\r\n","export async function loadJSON(url) {\r\n    const res = await fetch(url);\r\n    return await res.json();\r\n}\r\n","import {useEffect, useState} from \"react\";\r\nimport {addDataIntervals} from \"./interval\";\r\nimport {loadJSON} from \"./loadJSON\";\r\n\r\nexport default function useLoadTable({\r\n    rows,\r\n    setRows,\r\n    setStyle,\r\n    setColumns,\r\n    listRef,\r\n}) {\r\n    const [isLoading, setLoading] = useState(true);\r\n    useEffect(() => {\r\n        let interval = null;\r\n        //make it so setColumns is bigger with more\r\n        loadJSON(\"table.json\").then((data) => {\r\n            interval = addDataIntervals(rows, setRows, {...data.behavior});\r\n            const {\r\n                depositedWidth,\r\n                fromWidth,\r\n                receivedWidth,\r\n                blockWidth,\r\n                txfeeWidth,\r\n                txhashWidth,\r\n            } = data;\r\n            const totalWidth =\r\n                depositedWidth +\r\n                fromWidth +\r\n                receivedWidth +\r\n                blockWidth +\r\n                txfeeWidth +\r\n                txhashWidth;\r\n            const responsiveWidth = depositedWidth + fromWidth + receivedWidth;\r\n            console.log();\r\n            let auxArr = [];\r\n            let actualWidth = responsiveWidth;\r\n            if (window.outerWidth > totalWidth) {\r\n                actualWidth = totalWidth;\r\n                auxArr = [\r\n                    {\r\n                        width: data.txhashWidth ? data.txhashWidth : 0,\r\n                        label: \"TXHASH\",\r\n                        dataKey: \"txhash\",\r\n                        numeric: false,\r\n                    },\r\n                    {\r\n                        width: data.blockWidth ? data.blockWidth : 0,\r\n                        label: \"BLOCK\",\r\n                        dataKey: \"block\",\r\n                        numeric: true,\r\n                    },\r\n                    {\r\n                        width: data.txfeeWidth ? data.txfeeWidth : 0,\r\n                        label: \"[TXFEE]\",\r\n                        dataKey: \"txfee\",\r\n                        numeric: true,\r\n                    },\r\n                ];\r\n            }\r\n\r\n            setColumns([\r\n                {\r\n                    width: data.fromWidth ? data.fromWidth : 0,\r\n                    label: \"FROM\",\r\n                    dataKey: \"from\",\r\n                    numeric: false,\r\n                },\r\n                {\r\n                    width: data.receivedWidth ? data.receivedWidth : 0,\r\n                    label: \"Received\",\r\n                    dataKey: \"received\",\r\n                    numeric: true,\r\n                },\r\n                {\r\n                    width: data.depositedWidth ? data.depositedWidth : 0,\r\n                    label: \"Deposited\",\r\n                    dataKey: \"deposited\",\r\n                    numeric: true,\r\n                },\r\n                ...auxArr,\r\n            ]);\r\n            setStyle({\r\n                ...data,\r\n                totalWidth,\r\n                responsiveWidth,\r\n                actualWidth,\r\n                maxHeight:\r\n                    data.row.height * (data.behavior.rows + 1) +\r\n                    (data.behavior.offset ? data.behavior.offset : 0),\r\n                container: {\r\n                    ...data.container,\r\n                },\r\n            });\r\n        });\r\n        setLoading(false);\r\n        return () => {\r\n            clearInterval(interval);\r\n            console.log(\"clean\");\r\n        };\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n    return isLoading;\r\n}\r\n","import React, {useState, useEffect, useRef} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport useLoadTable from \"./../tableUtils/useLoadTable\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: (props) => ({\r\n        ...props.root,\r\n    }),\r\n    head: (props) => ({\r\n        ...props.head,\r\n    }),\r\n    table: (props) => ({\r\n        ...props.table,\r\n    }),\r\n    body: (props) => ({\r\n        ...props.body,\r\n    }),\r\n    txfee: (props) => ({\r\n        ...props.txfee,\r\n    }),\r\n    row: (props) => ({\r\n        ...props.row,\r\n    }),\r\n    container: (props) => ({\r\n        ...props.container,\r\n    }),\r\n});\r\n\r\nexport default function SimpleTable() {\r\n    const [style, setStyle] = useState({});\r\n    const classes = useStyles(style);\r\n    const [rows, setRows] = useState([]);\r\n    const endRef = useRef();\r\n    useLoadTable({rows, setRows, setStyle});\r\n\r\n    // useEffect(() => {\r\n    //     const interval = addDataIntervals(rows, setRows, 6);\r\n    //     loadJSON(\"table.json\").then((data) => {\r\n    //         setStyle({\r\n    //             ...data,\r\n    //             container: {\r\n    //                 ...data.container,\r\n    //                 maxHeight:\r\n    //                     (data.behavior.rows + 1) * data.row.height +\r\n    //                     data.behavior.offset,\r\n    //             },\r\n    //         });\r\n    //     });\r\n    //     return () => {\r\n    //         clearInterval(interval);\r\n    //         console.log(\"clean\");\r\n    //     };\r\n\r\n    //     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    // }, []);\r\n    const scrollToBottom = () => {\r\n        // endRef.current.scrollIntoView({behavior: \"smooth\"});\r\n        endRef.current.scrollTop = endRef.current.scrollHeight;\r\n    };\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n        // console.log(style);\r\n    }, [rows]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TableContainer\r\n                component={Paper}\r\n                className={classes.container}\r\n                ref={endRef}\r\n            >\r\n                <Table\r\n                    stickyHeader\r\n                    className={classes.table}\r\n                    aria-label=\"sticky table\"\r\n                >\r\n                    <TableHead\r\n                        classes={{\r\n                            root: classes.head,\r\n                        }}\r\n                    >\r\n                        <TableRow>\r\n                            <TableCell>TXHASH</TableCell>\r\n                            <TableCell align=\"right\">BLOCK</TableCell>\r\n                            <TableCell align=\"right\">FROM</TableCell>\r\n                            <TableCell align=\"right\">RECEIVED</TableCell>\r\n                            <TableCell align=\"right\">DEPOSITED</TableCell>\r\n                            <TableCell\r\n                                align=\"right\"\r\n                                className={classes.txfee}\r\n                                style={{fontSize: \"8px\"}}\r\n                            >\r\n                                [TXFEE]\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody\r\n                        classes={{\r\n                            root: classes.body,\r\n                        }}\r\n                    >\r\n                        {rows.map((row, index) => (\r\n                            <Slide\r\n                                direction=\"down\"\r\n                                in={true}\r\n                                mountOnEnter\r\n                                unmountOnExit\r\n                                key={\"tx-\" + index}\r\n                            >\r\n                                <TableRow\r\n                                    classes={{\r\n                                        root: classes.row,\r\n                                    }}\r\n                                >\r\n                                    <TableCell\r\n                                        className={classes.txhash}\r\n                                        component=\"th\"\r\n                                        scope=\"row\"\r\n                                    >\r\n                                        {row.txhash}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        className={classes.block}\r\n                                        align=\"right\"\r\n                                    >\r\n                                        {row.block}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        className={classes.from}\r\n                                        align=\"right\"\r\n                                    >\r\n                                        {row.from}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        align=\"right\"\r\n                                        className={classes.received}\r\n                                    >\r\n                                        {row.received.toFixed(3)}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell\r\n                                        className={classes.deposited}\r\n                                        align=\"right\"\r\n                                    >\r\n                                        {row.deposited.toFixed(3)}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell\r\n                                        className={classes.txfee}\r\n                                        align=\"right\"\r\n                                    >\r\n                                        {row.txfee.toFixed(5)}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </Slide>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                {/* <div style={{float: \"left\", clear: \"both\"}} ></div> */}\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState, useEffect, useRef} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {AutoSizer, Column, Table} from \"react-virtualized\";\r\nimport useLoadTable from \"./../tableUtils/useLoadTable\";\r\nimport {makeStyles, createStyles} from \"@material-ui/core/styles\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        flexContainer: {\r\n            display: \"flex\",\r\n            // alignItems: \"center\",\r\n            boxSizing: \"border-box\",\r\n        },\r\n        tableRow: {},\r\n        tableRowHover: {\r\n            \"&:hover\": {\r\n                backgroundColor: theme.palette.grey[200],\r\n            },\r\n        },\r\n        tableCell: {},\r\n        noClick: {\r\n            cursor: \"initial\",\r\n        },\r\n        root: (props) => ({\r\n            ...props.root,\r\n        }),\r\n        head: (props) => ({\r\n            opacity: 0.5,\r\n            ...props.head,\r\n        }),\r\n        table: (props) => ({\r\n            \"& .ReactVirtualized__Table__headerRow\": {\r\n                flip: false,\r\n                paddingRight:\r\n                    theme.direction === \"rtl\" ? \"0 !important\" : undefined,\r\n            },\r\n            \"& .ReactVirtualized__Grid\": {\r\n                outline: \"none\",\r\n                // flip: false,\r\n                // paddingRight:\r\n                //     theme.direction === \"rtl\" ? \"0 !important\" : undefined,\r\n            },\r\n            ...props.table,\r\n        }),\r\n        body: (props) => ({\r\n            root: {\r\n                ...props.body,\r\n            },\r\n        }),\r\n        txfee: (props) => ({\r\n            ...props.txfee,\r\n        }),\r\n        txHash: (props) => ({\r\n            ...props.txHash,\r\n        }),\r\n        row: (props) => ({\r\n            ...props.row,\r\n        }),\r\n        container: (props) => ({\r\n            ...props.container,\r\n        }),\r\n    })\r\n);\r\n// const styles = (theme) => ({\r\n//     flexContainer: {\r\n//         display: \"flex\",\r\n//         alignItems: \"center\",\r\n//         boxSizing: \"border-box\",\r\n//     },\r\n//     table: {\r\n//         // temporary right-to-left patch, waiting for\r\n//         // https://github.com/bvaughn/react-virtualized/issues/454\r\n//         \"& .ReactVirtualized__Table__headerRow\": {\r\n//             flip: false,\r\n//             paddingRight:\r\n//                 theme.direction === \"rtl\" ? \"0 !important\" : undefined,\r\n//         },\r\n\r\n//     },\r\n//     tableRow: {\r\n//         cursor: \"pointer\",\r\n//     },\r\n//     tableRowHover: {\r\n//         \"&:hover\": {\r\n//             backgroundColor: theme.palette.grey[200],\r\n//         },\r\n//     },\r\n//     tableCell: {\r\n//         flex: 1,\r\n//     },\r\n//     noClick: {\r\n//         cursor: \"initial\",\r\n//     },\r\n//     head: {\r\n//         position: \"sticky\",\r\n//         opacity: 0.1,\r\n//         backgroundColor: \"blue\",\r\n//     },\r\n// });\r\n\r\nclass MuiVirtualizedTable extends React.PureComponent {\r\n    static defaultProps = {\r\n        headerHeight: 53,\r\n        rowHeight: 53,\r\n        endRef: React.createRef(),\r\n    };\r\n\r\n    // state = {\r\n    //     headerHeight: 48,\r\n    //     rowHeight: 48,\r\n    // };\r\n    componentDidMount() {\r\n        if (this.props.style) {\r\n            console.log(this.props);\r\n            // this.props.style.row.height\r\n            // state.headerHeight = this.prop.style.row.height;\r\n            // state.rowHeight = this.prop.style.row.height;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.rowCount > prevProps.rowCount) {\r\n            this.props.endRef.current.scrollToRow(this.props.rowCount);\r\n        }\r\n    }\r\n\r\n    getRowClassName = ({index}) => {\r\n        const {classes, onRowClick} = this.props;\r\n\r\n        return clsx(classes.tableRow, classes.flexContainer, {\r\n            [classes.tableRowHover]: index !== -1 && onRowClick != null,\r\n        });\r\n    };\r\n\r\n    cellRenderer = ({cellData, columnIndex}) => {\r\n        const {columns, classes, rowHeight, onRowClick} = this.props;\r\n        const extraClass =\r\n            columns[columnIndex].dataKey === \"txfee\" ? classes.txfee : null;\r\n        return (\r\n            <Fade in={true} style={{transitionDelay: \"75ms\"}}>\r\n                <TableCell\r\n                    component=\"div\"\r\n                    className={clsx(\r\n                        classes.row,\r\n                        classes.flexContainer,\r\n                        {\r\n                            [classes.noClick]: onRowClick == null,\r\n                        },\r\n                        extraClass\r\n                    )}\r\n                    variant=\"body\"\r\n                    style={{height: rowHeight}}\r\n                    align={\r\n                        (columnIndex != null && columns[columnIndex].numeric) ||\r\n                        false\r\n                            ? \"right\"\r\n                            : \"left\"\r\n                    }\r\n                >\r\n                    {cellData}\r\n                </TableCell>\r\n            </Fade>\r\n        );\r\n    };\r\n\r\n    headerRenderer = ({label, columnIndex}) => {\r\n        const {headerHeight, columns, classes} = this.props;\r\n        const extraClass =\r\n            columns[columnIndex].dataKey === \"txfee\" ? classes.txfee : null;\r\n\r\n        // const\r\n        // console.log(totalWidth);\r\n        return (\r\n            <TableCell\r\n                component=\"div\"\r\n                className={clsx(\r\n                    classes.tableCell,\r\n                    classes.flexContainer,\r\n                    classes.noClick,\r\n                    classes.head,\r\n                    extraClass\r\n                )}\r\n                variant=\"head\"\r\n                style={{\r\n                    height: headerHeight,\r\n                    width: columns[columnIndex].width,\r\n                }}\r\n                align={columns[columnIndex].numeric || false ? \"right\" : \"left\"}\r\n            >\r\n                <span>{label}</span>\r\n            </TableCell>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            classes,\r\n            columns,\r\n            rowHeight,\r\n            headerHeight,\r\n            ...tableProps\r\n        } = this.props;\r\n        return (\r\n            <AutoSizer>\r\n                {({height, width}) => (\r\n                    <Table\r\n                        height={height}\r\n                        width={width}\r\n                        rowHeight={rowHeight}\r\n                        gridStyle={{\r\n                            direction: \"inherit\",\r\n                            overflowY: \"hidden\",\r\n                        }}\r\n                        headerHeight={headerHeight}\r\n                        className={classes.table}\r\n                        {...tableProps}\r\n                        rowClassName={this.getRowClassName}\r\n                        ref={this.props.endRef}\r\n                    >\r\n                        {columns.map(({dataKey, ...other}, index) => {\r\n                            return (\r\n                                <Column\r\n                                    key={dataKey}\r\n                                    headerRenderer={(headerProps) =>\r\n                                        this.headerRenderer({\r\n                                            ...headerProps,\r\n                                            columnIndex: index,\r\n                                        })\r\n                                    }\r\n                                    className={classes.flexContainer}\r\n                                    cellRenderer={this.cellRenderer}\r\n                                    dataKey={dataKey}\r\n                                    {...other}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </Table>\r\n                )}\r\n            </AutoSizer>\r\n        );\r\n    }\r\n}\r\n\r\nMuiVirtualizedTable.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    columns: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            dataKey: PropTypes.string.isRequired,\r\n            label: PropTypes.string.isRequired,\r\n            numeric: PropTypes.bool,\r\n            width: PropTypes.number.isRequired,\r\n        })\r\n    ).isRequired,\r\n    headerHeight: PropTypes.number,\r\n    onRowClick: PropTypes.func,\r\n    rowHeight: PropTypes.number,\r\n};\r\n\r\n// const VirtualizedTable = withStyles(styles)(MuiVirtualizedTable);\r\nconst VirtualizedTable = MuiVirtualizedTable;\r\n\r\nexport default function ReactVirtualizedTable() {\r\n    const [rows, setRows] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [style, setStyle] = useState({});\r\n    // const [columns, setColumns] = useState();\r\n    const classes = useStyles(style);\r\n    const isLoading = useLoadTable({\r\n        rows,\r\n        setRows,\r\n        setStyle,\r\n        intervalTime: style.behavior,\r\n        setColumns,\r\n    });\r\n    useEffect(() => {\r\n        // onResize();\r\n    }, [style, isLoading]);\r\n\r\n    // \"txhashWidth\": 250\r\n    return !isLoading ? (\r\n        <Paper\r\n            style={{\r\n                height: style.maxHeight,\r\n                width: style.actualWidth,\r\n                minWidth: style.actualWidth,\r\n            }}\r\n            className={classes.container}\r\n        >\r\n            <VirtualizedTable\r\n                rowCount={rows.length}\r\n                rowGetter={({index}) => rows[index]}\r\n                classes={classes}\r\n                style={style}\r\n                columns={columns}\r\n            />\r\n        </Paper>\r\n    ) : null;\r\n}\r\n","import React, {useEffect, useState} from \"react\";\nimport \"./App.css\";\nimport MaterialTableDemo from \"./Table/index\";\nimport VirtualizedTable from \"./VirtualizedTable/index\";\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport {loadJSON} from \"./tableUtils/loadJSON\";\n\nfunction App() {\n    // const theme = createMuiTheme(styles);\n    const [theme, setTheme] = useState({});\n    const [isLoading, setLoading] = useState(true);\n\n    useEffect(() => {\n        loadJSON(\"theme.json\").then((data) => {\n            setTheme(createMuiTheme(data));\n            setLoading(false);\n        });\n        return () => {};\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return !isLoading ? (\n        <MuiThemeProvider theme={theme}>\n            <CssBaseline />\n            {/* <MaterialTableDemo /> */}\n            <VirtualizedTable />\n        </MuiThemeProvider>\n    ) : null;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"crypto_att\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}